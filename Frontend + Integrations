import React, { useState, useEffect, useRef } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Upload, FileText, Bot, ShieldCheck, LayoutDashboard, AlertCircle, CheckCircle, XCircle, User, MessageSquare, Send } from 'lucide-react';

// Mock Data for Charts - No changes here
const kycStatusData = [
  { name: 'Verified', value: 400, color: '#10B981' }, // Emerald-500
  { name: 'Pending', value: 300, color: '#F59E0B' }, // Amber-500
  { name: 'Rejected', value: 150, color: '#EF4444' }, // Red-500
];

const documentTypeData = [
  { name: 'Passport', count: 250 },
  { name: 'License', count: 300 },
  { name: 'National ID', count: 450 },
  { name: 'Other', count: 80 },
];

// Main App Component
export default function App() {
  const [activeView, setActiveView] = useState('dashboard');

  const renderView = () => {
    switch (activeView) {
      case 'dashboard':
        return <Dashboard />;
      case 'kyc':
        return <KYCValidation />;
      case 'chatbot':
        return <Chatbot />;
      default:
        return <Dashboard />;
    }
  };

  const NavItem = ({ viewName, icon, label }) => (
    <li
      className={`flex items-center p-3 my-1.5 rounded-lg cursor-pointer transition-all duration-300 ease-in-out group ${
        activeView === viewName
          ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-md'
          : 'text-gray-500 hover:bg-gray-100 hover:text-gray-900'
      }`}
      onClick={() => setActiveView(viewName)}
    >
      {icon}
      <span className="ml-4 font-semibold tracking-wide">{label}</span>
    </li>
  );

  return (
    <div className="flex h-screen bg-gray-50 font-sans">
      {/* Sidebar Navigation */}
      <aside className="w-64 bg-white shadow-xl flex flex-col p-4 transition-all duration-300">
        <div className="flex items-center mb-10 p-2">
          <div className="p-2 bg-blue-100 rounded-lg">
            <ShieldCheck className="h-8 w-8 text-blue-600" />
          </div>
          <h1 className="ml-3 text-2xl font-bold text-gray-800 tracking-wider">KYC AI</h1>
        </div>
        <nav className="flex-grow">
          <ul>
            <NavItem viewName="dashboard" icon={<LayoutDashboard size={22} />} label="Dashboard" />
            <NavItem viewName="kyc" icon={<FileText size={22} />} label="KYC Validation" />
            <NavItem viewName="chatbot" icon={<Bot size={22} />} label="Insight Bot" />
          </ul>
        </nav>
        <div className="mt-auto border-t pt-4">
            <div className="flex items-center p-2 bg-gray-50 rounded-lg">
                <img src="https://placehold.co/40x40/E0E7FF/4F46E5?text=JD" alt="User" className="rounded-full" />
                <div className="ml-3">
                    <p className="text-sm font-semibold text-gray-800">John Doe</p>
                    <p className="text-xs text-gray-500">Admin</p>
                </div>
            </div>
        </div>
      </aside>

      {/* Main Content Area */}
      <main className="flex-1 p-8 overflow-y-auto">
        {renderView()}
      </main>
    </div>
  );
}

// --- Components for each view ---

// 1. Dashboard Component
const Dashboard = () => {
    return (
        <div className="animate-fade-in">
            <h2 className="text-4xl font-bold text-gray-800 mb-2">Welcome Back!</h2>
            <p className="text-gray-500 mb-8">Here's a summary of your KYC activities.</p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                <InfoCard title="Overall Trust Score" value="85%" icon={<CheckCircle className="text-green-500" />} trend="+5% this month" />
                <InfoCard title="Pending Verifications" value="42" icon={<AlertCircle className="text-yellow-500" />} trend="-10 this week" />
                <InfoCard title="Fraud Alerts" value="3" icon={<XCircle className="text-red-500" />} trend="New today" />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 mt-10">
                <div className="lg:col-span-3 bg-white p-6 rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300">
                    <h3 className="font-bold text-xl text-gray-700 mb-4">Documents Processed</h3>
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={documentTypeData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                            <XAxis dataKey="name" stroke="#9ca3af" />
                            <YAxis stroke="#9ca3af" />
                            <Tooltip cursor={{fill: 'rgba(60, 130, 246, 0.1)'}} contentStyle={{backgroundColor: '#fff', border: '1px solid #e0e0e0', borderRadius: '0.5rem'}}/>
                            <Legend />
                            <Bar dataKey="count" fill="url(#colorUv)" radius={[4, 4, 0, 0]} />
                        </BarChart>
                    </ResponsiveContainer>
                </div>
                <div className="lg:col-span-2 bg-white p-6 rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300">
                    <h3 className="font-bold text-xl text-gray-700 mb-4">KYC Status Overview</h3>
                     <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                            <Pie data={kycStatusData} dataKey="value" nameKey="name" cx="50%" cy="50%" innerRadius={60} outerRadius={100} paddingAngle={5} labelLine={false}>
                                {kycStatusData.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={entry.color} className="focus:outline-none" />
                                ))}
                            </Pie>
                            <Tooltip contentStyle={{backgroundColor: '#fff', border: '1px solid #e0e0e0', borderRadius: '0.5rem'}}/>
                            <Legend />
                        </PieChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
};

const InfoCard = ({ title, value, icon, trend }) => (
    <div className="bg-white p-6 rounded-xl shadow-sm hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 ease-in-out">
        <div className="flex items-center justify-between mb-4">
            <p className="text-md font-semibold text-gray-600">{title}</p>
            <div className="bg-gray-100 p-3 rounded-full">
                {icon}
            </div>
        </div>
        <p className="text-4xl font-bold text-gray-800">{value}</p>
        <p className="text-sm text-gray-400 mt-2">{trend}</p>
    </div>
);


// 2. KYC Validation Component
const KYCValidation = () => {
    const [file, setFile] = useState(null);
    const [isDragOver, setIsDragOver] = useState(false);
    const [validationStatus, setValidationStatus] = useState('idle');
    const [validationResult, setValidationResult] = useState(null);

    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            setFile(e.target.files[0]);
            setValidationStatus('idle');
            setValidationResult(null);
        }
    };
    
    const handleDragEvents = (e, over) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(over);
    };

    const handleDrop = (e) => {
        handleDragEvents(e, false);
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            setFile(e.dataTransfer.files[0]);
            setValidationStatus('idle');
            setValidationResult(null);
        }
    };

    const handleValidate = () => {
        if (!file) return;
        setValidationStatus('validating');
        setTimeout(() => {
            const isSuccess = Math.random() > 0.3;
            if (isSuccess) {
                setValidationStatus('success');
                setValidationResult({ name: 'Jane Smith', dob: '1985-05-20', idNumber: 'XYZ987654', match: '94%', faceVerified: true });
            } else {
                setValidationStatus('error');
                setValidationResult({ error: 'Document details could not be read. Please try a clearer image.' });
            }
        }, 2000);
    };

    return (
        <div className="animate-fade-in">
            <h2 className="text-4xl font-bold text-gray-800 mb-8">KYC Document Validation</h2>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="bg-white p-8 rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300">
                    <h3 className="font-bold text-xl text-gray-700 mb-4">Upload Document</h3>
                    <div 
                        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors duration-300 ${isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
                        onDragOver={(e) => handleDragEvents(e, true)}
                        onDragLeave={(e) => handleDragEvents(e, false)}
                        onDrop={handleDrop}
                    >
                        <Upload className="mx-auto h-12 w-12 text-gray-400" />
                        <p className="mt-2 text-gray-600">Drag & drop your file here or</p>
                        <label htmlFor="file-upload" className="mt-4 inline-block bg-blue-500 text-white font-bold py-2 px-4 rounded-lg cursor-pointer hover:bg-blue-600 transition-colors">
                            Browse Files
                        </label>
                        <input id="file-upload" type="file" className="hidden" onChange={handleFileChange} accept="image/png, image/jpeg, application/pdf" />
                        {file && <p className="mt-4 text-sm font-semibold text-green-600">Selected: {file.name}</p>}
                    </div>
                    <button 
                        onClick={handleValidate}
                        disabled={!file || validationStatus === 'validating'}
                        className="w-full mt-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:shadow-lg disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all duration-300"
                    >
                        {validationStatus === 'validating' ? 'Validating...' : 'Validate Now'}
                    </button>
                </div>

                <div className="bg-white p-8 rounded-xl shadow-sm">
                    <h3 className="font-bold text-xl text-gray-700 mb-4">Validation Result</h3>
                    <div className="h-full flex flex-col justify-center">
                        {validationStatus === 'idle' && <div className="text-center text-gray-500"><FileText size={48} className="mx-auto mb-4" />Upload a document to see the result.</div>}
                        {validationStatus === 'validating' && <div className="text-center text-blue-500"><div className="loader mx-auto"></div>Analyzing document...</div>}
                        {validationStatus === 'success' && validationResult && <ResultDisplay result={validationResult} />}
                        {validationStatus === 'error' && validationResult && <ErrorDisplay error={validationResult.error} />}
                    </div>
                </div>
            </div>
        </div>
    );
};

const ResultDisplay = ({ result }) => (
    <div className="animate-fade-in space-y-4">
        <div className="flex items-center bg-green-50 p-4 rounded-lg border-l-4 border-green-500">
            <CheckCircle className="text-green-500 mr-4" />
            <span className="font-bold text-green-800">Verification Successful</span>
        </div>
        <div className="divide-y rounded-lg border">
            <div className="p-3 grid grid-cols-3"><span className="font-semibold text-gray-500 col-span-1">Name</span> <span className="text-gray-800 col-span-2">{result.name}</span></div>
            <div className="p-3 grid grid-cols-3"><span className="font-semibold text-gray-500 col-span-1">Date of Birth</span> <span className="text-gray-800 col-span-2">{result.dob}</span></div>
            <div className="p-3 grid grid-cols-3"><span className="font-semibold text-gray-500 col-span-1">ID Number</span> <span className="text-gray-800 col-span-2">{result.idNumber}</span></div>
            <div className="p-3 grid grid-cols-3"><span className="font-semibold text-gray-500 col-span-1">Confidence</span> <span className="text-gray-800 col-span-2">{result.match}</span></div>
            <div className="p-3 grid grid-cols-3"><span className="font-semibold text-gray-500 col-span-1">Face Match</span> <span className="text-green-600 font-bold col-span-2">{result.faceVerified ? 'Passed' : 'Failed'}</span></div>
        </div>
    </div>
);

const ErrorDisplay = ({ error }) => (
     <div className="animate-fade-in space-y-4 text-center">
        <div className="flex items-center bg-red-50 p-4 rounded-lg border-l-4 border-red-500">
            <XCircle className="text-red-500 mr-4" />
            <span className="font-bold text-red-800">Verification Failed</span>
        </div>
        <p className="text-gray-600 p-4">{error}</p>
    </div>
);


// 3. Chatbot Component
const Chatbot = () => {
    const [messages, setMessages] = useState([
        { id: 1, text: "Hello! I am your KYC Insight Assistant. How can I help you today?", sender: 'bot' }
    ]);
    const [input, setInput] = useState('');
    const chatEndRef = useRef(null);

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    const handleSend = () => {
        if (input.trim() === '') return;
        const newMessages = [...messages, { id: Date.now(), text: input, sender: 'user' }];
        setMessages(newMessages);
        setInput('');
        setTimeout(() => {
            setMessages(prev => [...prev, { id: Date.now() + 1, text: "I am analyzing your query... One moment.", sender: 'bot' }]);
        }, 1500);
    };

    return (
        <div className="flex flex-col h-full bg-white rounded-xl shadow-sm animate-fade-in">
            <div className="p-4 border-b flex items-center">
                <div className="relative">
                    <Bot size={32} className="text-blue-600" />
                    <span className="absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full bg-green-400 ring-2 ring-white"></span>
                </div>
                <h2 className="text-xl font-bold text-gray-800 ml-4">Insight Bot</h2>
            </div>
            <div className="flex-1 p-6 overflow-y-auto bg-gray-50">
                {messages.map((msg) => (
                    <div key={msg.id} className={`flex my-3 items-end ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                        {msg.sender === 'bot' && <Bot className="h-6 w-6 text-gray-400 mr-2" />}
                        <div className={`p-3 rounded-2xl max-w-lg shadow-sm ${msg.sender === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-gray-800 rounded-bl-none'}`}>
                            {msg.text}
                        </div>
                        {msg.sender === 'user' && <User className="h-6 w-6 text-gray-400 ml-2" />}
                    </div>
                ))}
                <div ref={chatEndRef} />
            </div>
            <div className="p-4 border-t flex items-center bg-white">
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                    placeholder="Ask about fraud patterns..."
                    className="flex-1 p-3 border-gray-200 border rounded-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all"
                />
                <button onClick={handleSend} className="ml-3 bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all">
                    <Send size={20} />
                </button>
            </div>
        </div>
    );
};

// Add some global styles for animations and loaders
const style = document.createElement('style');
style.innerHTML = `
  @keyframes fade-in {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }
  .loader {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  /* Custom gradient for charts */
  .recharts-surface {
      overflow: visible;
  }
`;
document.head.appendChild(style);

// Gradient for Bar Chart
const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
svg.setAttribute('height', '0');
svg.setAttribute('width', '0');
svg.innerHTML = `
  <defs>
    <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8}/>
      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0.2}/>
    </linearGradient>
  </defs>
`;
document.body.appendChild(svg);
